global:
  imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

azDocumentAi:
  replicaCount: 1
  # List of imagePullSecrets for private image repositories
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/az-document-ai
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
    #- name: ENV_VAR
    #  value: value
  ingress:
    enabled: false
    annotations: {}
    ingressClassName: ~
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
    # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  serviceMonitor:
    enabled: false
    namespace: ~
    scrapeInterval: 15s
    scrapeTimeout: 15s
  serviceAccount:
    create: true
    annotations: {}
    # ToDo: make fallback name unique
    name: az-document-ai
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    httpGet:
      scheme: HTTP
      path: /q/health/started
      port: management
    failureThreshold: 1
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 1
  volumes:
    - name: cache
      emptyDir: {}
  volumeMounts:
    - name: cache
      mountPath: /tmp

fin:
  replicaCount: 1
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/fin
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
    #- name: ENV_VAR
  #  value: value
  ingress:
    enabled: false
    annotations: {}
    ingressClassName: ~
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
  # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  serviceMonitor:
    enabled: false
    namespace: ~
    scrapeInterval: 15s
    scrapeTimeout: 15s
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    httpGet:
      scheme: HTTP
      path: /q/health/started
      port: management
    failureThreshold: 1
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 1
  volumes:
    - name: cache
      emptyDir: {}
  volumeMounts:
    - name: cache
      mountPath: /tmp

postgresqlFin:
  enabled: true
  nameOverride: fin-postgresql
  auth:
    database: fin

finNarrator:
  replicaCount: 1
  # List of imagePullSecrets for private image repositories
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/fin-narrator
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
  #- name: ENV_VAR
  #  value: value
  ingress:
    enabled: false
    annotations: {}
    ingressClassName: ~
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
  # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  serviceMonitor:
    enabled: false
    namespace: ~
    scrapeInterval: 15s
    scrapeTimeout: 15s
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    httpGet:
      scheme: HTTP
      path: /q/health/started
      port: management
    failureThreshold: 1
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 1
  volumes:
    - name: cache
      emptyDir: {}
  volumeMounts:
    - name: cache
      mountPath: /tmp


org:
  replicaCount: 1
  # List of imagePullSecrets for private image repositories
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/org
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
  #- name: ENV_VAR
  #  value: value
  ingress:
    enabled: false
    annotations: {}
    ingressClassName: ~
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
  # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  serviceMonitor:
    enabled: false
    namespace: ~
    scrapeInterval: 15s
    scrapeTimeout: 15s
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    httpGet:
      scheme: HTTP
      path: /q/health/started
      port: management
    failureThreshold: 1
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 1
  volumes:
    - name: cache
      emptyDir: {}
  volumeMounts:
    - name: cache
      mountPath: /tmp

postgresqlOrg:
  enabled: true
  nameOverride: org-postgresql
  auth:
    database: org

zugferd:
  replicaCount: 1
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/zugferd
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
  #- name: ENV_VAR
  #  value: value
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
  # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    httpGet:
      path: /q/health/live
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    httpGet:
      path: /q/health/ready
      port: management
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    httpGet:
      scheme: HTTP
      path: /q/health/started
      port: management
    failureThreshold: 1
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 1
  volumes:
    - name: cache
      emptyDir: {}
  volumeMounts:
    - name: cache
      mountPath: /tmp

frontend:
  replicaCount: 1
  # List of imagePullSecrets for private image repositories
  imagePullSecrets: []
  image:
    # ToDo: should also be globally configurable
    #registry: ghcr.io
    repository: ghcr.io/hopps-app/hopps/frontend
    tag: ""
    pullPolicy: IfNotPresent
  envFrom: []
  #  - configMapRef:
  #      name: name
  envVars: []
  #- name: ENV_VAR
  #  value: value
  ingress:
    enabled: false
    annotations: {}
    ingressClassName: ~
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: false
    seccompProfile:
      type: RuntimeDefault
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    port: 8080
  strategy: {}
  # type: Recreate
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  # Note: not implemented for frontend yet
  serviceMonitor:
    enabled: false
    namespace: ~
    scrapeInterval: 15s
    scrapeTimeout: 15s
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automount: false
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 256Mi
  #  limits:
  #    cpu: 100m
  #    memory: 256Mi
  # Node selector settings for scheduling the pod on specific nodes
  nodeSelector: {}
  # Tolerations settings for scheduling the pod based on node taints
  tolerations: []
  # Affinity settings for controlling pod scheduling
  affinity: {}
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  startupProbe:
    initialDelaySeconds: 1
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 1
    httpGet:
      scheme: HTTP
      path: /
      port: http
  volumes: {}
  volumeMounts: {}

# external dependencies
keycloak:
  enabled: false
  image:
    # use our keycloak image to provide hopps theme
    repository: ghcr.io/hopps-app/hopps/hopps-keycloak
    tag: 18-keycloak-26.2.1
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    seccompProfile:
      type: RuntimeDefault

# openfga enabled needs to be outside of openfga, as the values.schema of openfga doesn't allow this field
openfgaEnabled: false
openfga:
  # configure securityContext
  podSecurityContext:
    fsGroup: 2000
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false

kafka:
  enabled: false

kafka-ui:
  enabled: false
  #yamlApplicationConfig:
  #  kafka:
  #    clusters:
  #      - name: yaml
  #        # ToDo: url should automatically be calculated, dependent on the name of the release-name
  #        bootstrapServers: hopps-kafka:9092
  #  auth:
  #    type: disabled
  #  management:
  #    health:
  #      ldap:
  #        enabled: false
  #  ingress:
  #    enabled: true
  #    ingressClassName: nginx
  #    annotations: {}
  #      # cert-manager.io/cluster-issuer: letsencrypt-prod
  #    tls:
  #      enabled: true
  #      secretName: kafka-tls
  #    host: kafka-ui.<domain>
